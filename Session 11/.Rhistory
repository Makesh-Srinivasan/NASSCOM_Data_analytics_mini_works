data[data$Property_Area=="Urban", 'Property_Area'] <- as.numeric(0)
data[data$Property_Area=="Rural", 'Property_Area'] <- as.numeric(1)
data[data$Property_Area=="Semiurban", 'Property_Area'] <- as.numeric(2)
data[data$Loan_Status=="Y", 'Loan_Status'] <- as.numeric(1)
data[data$Loan_Status=="N", 'Loan_Status'] <- as.numeric(0)
data$Gender = as.numeric(as.character(data$Gender))
data$Married = as.numeric(as.character(data$Married))
data$Dependents = as.numeric(as.character(data$Dependents))
data$Education = as.numeric(as.character(data$Education))
data$Self_Employed = as.numeric(as.character(data$Self_Employed))
data$Property_Area = as.numeric(as.character(data$Property_Area))
data$Loan_Status = as.numeric(as.character(data$Loan_Status))
head(data, 7)
str(data)
data <- subset(data, select = -c(ApplicantIncome, CoapplicantIncome))
head(data, 5)
data <- subset(data, select = -c(ApplicantIncome, CoapplicantIncome))
#data <- subset(data, select = -c(ApplicantIncome, CoapplicantIncome))
head(data, 5)
str(data)
# Remove the 2 columns:
#data <- subset(data, select = -c(ApplicantIncome, CoapplicantIncome))
# We can remove the Loan_ID columns as well:
data <- subset(data, select = -c(Loan_ID))
head(data, 5)
str(data)
data$Total_Income = as.numeric(gsub("[\\$,]", "", data$Total_Income))
head(data, 5)
str(data)
library(tidyverse)
print(paste("Number of missing values = ", sum(is.na(data))))
print(paste("Number of duplicate entries = ", sum(duplicated(data)) - 1))
print(paste("Number of duplicate entries = ", sum(duplicated(data))))
cols = colnames(data)
for (c in cols) {
print(paste("Number of missing valus in column", c, " = ", sum(is.na(data$c))))
}
cols = colnames(data)
for (c in cols) {
print(paste("Number of missing valus in column", c, " = ", sum(is.na(data$LoanAmount))))
}
sum(is.na(data$Gender))
sum(is.na(data$Married))
sum(is.na(data$Dependents))
sum(is.na(data$Education))
sum(is.na(data$Self_Employed))
sum(is.na(data$LoanAmount))
sum(is.na(data$Loan_Amount_Term))
sum(is.na(data$Credit_History))
sum(is.na(data$Property_Area))
sum(is.na(data$Loan_Status))
sum(is.na(data$Total_Income))
#Even though the datatypes are numeric or integral, the following features are categorical. The general norm is to replace them with modal value of the column.
#Gender
data <- data %>%
mutate(Gender = replace(Gender, is.na(Gender), mode(Gender, na.rm = TRUE)))
#Even though the datatypes are numeric or integral, the following features are categorical. The general norm is to replace them with modal value of the column.
library(tidyverse)
#Gender
data <- data %>%
mutate(Gender = replace(Gender, is.na(Gender), mode(Gender, na.rm = TRUE)))
#Even though the datatypes are numeric or integral, the following features are categorical. The general norm is to replace them with modal value of the column.
library(tidyverse)
#Gender
data <- data %>%
mutate(Gender = replace(Gender, is.na(Gender), mean(Gender, na.rm = TRUE)))
#Married
data <- data %>%
mutate(Married = replace(Married, is.na(Married), mode(Married, na.rm = TRUE)))
#Even though the datatypes are numeric or integral, the following features are categorical. The general norm is to replace them with modal value of the column.
library(tidyverse)
#Gender
data <- data %>%
mutate(Gender = replace(Gender, is.na(Gender), mean(Gender, na.rm = TRUE)))
#Married
#data <- data %>%
#mutate(Married = replace(Married, is.na(Married), mode(Married, na.rm = TRUE)))
data <- data %>%
mutate(Married = if_else(is.na(Married),
calc_mode(Married),
Married))
#LoanAmount
print(paste("Mean value of the column LoanAmount = ", mean(data$LoanAmount,na.rm = TRUE)))
print(paste("Median value of LoanAmount = ", median(data$LoanAmount,na.rm = TRUE)))
print(paste("Maximum value of LoanAmount = ", max(data$LoanAmount,na.rm = TRUE)))
print(paste("Minimum value of LoanAmount = ", min(data$LoanAmount,na.rm = TRUE)))
#Loan_Amount_Term
print(paste("Mean value of the column Loan_Amount_Term = ", mean(data$Loan_Amount_Term,na.rm = TRUE)))
print(paste("Median value of Loan_Amount_Term = ", median(data$Loan_Amount_Term,na.rm = TRUE)))
print(paste("Maximum value of Loan_Amount_Term = ", max(data$Loan_Amount_Term,na.rm = TRUE)))
print(paste("Minimum value of Loan_Amount_Term = ", min(data$Loan_Amount_Term,na.rm = TRUE)))
#Dependents
print(paste("Mean value of the column Dependents = ", mean(data$Dependents,na.rm = TRUE)))
print(paste("Median value of Dependents = ", median(data$Dependents,na.rm = TRUE)))
print(paste("Maximum value of Dependents = ", max(data$Dependents,na.rm = TRUE)))
print(paste("Minimum value of Dependents = ", min(data$Dependents,na.rm = TRUE)))
# In all the three cases the min and max values differ with a big range. Hence, use median or mean. I have chosen median.
#LoanAmount
data <- data %>%
mutate(LoanAmount = replace(LoanAmount, is.na(LoanAmount), median(LoanAmount, na.rm = TRUE)))
#Loan_Amount_Term
data <- data %>%
mutate(Loan_Amount_Term = replace(Loan_Amount_Term, is.na(Loan_Amount_Term), median(Loan_Amount_Term, na.rm = TRUE)))
#Dependents
data <- data %>%
mutate(Dependents = replace(Dependents, is.na(Dependents), median(Dependents, na.rm = TRUE)))
library(tidyverse)
# The mean was chosen for these columns because it is the most commonly adopted measure while replacing values that are binary (1,0)
#Gender
data <- data %>%
mutate(Gender = replace(Gender, is.na(Gender), mean(Gender, na.rm = TRUE)))
#Married
data <- data %>%
mutate(Married = replace(Married, is.na(Married), mean(Married, na.rm = TRUE)))
#Self_Employed
data <- data %>%
mutate(Self_Employed = replace(Self_Employed, is.na(Self_Employed), mean(Self_Employed, na.rm = TRUE)))
#Credit_History
data <- data %>%
mutate(Credit_History = replace(Credit_History, is.na(Credit_History), mean(Credit_History, na.rm = TRUE)))
print(paste("Number of missing values = ", sum(is.na(data))))
summary(data)
# In all the three cases the min and max values differ with a big range. Hence, use median or mean. I have chosen mean and median as shown below
#LoanAmount
data <- data %>%
mutate(LoanAmount = replace(LoanAmount, is.na(LoanAmount), mean(LoanAmount, na.rm = TRUE)))
#Loan_Amount_Term
data <- data %>%
mutate(Loan_Amount_Term = replace(Loan_Amount_Term, is.na(Loan_Amount_Term), mean(Loan_Amount_Term, na.rm = TRUE)))
#Dependents
data <- data %>%
mutate(Dependents = replace(Dependents, is.na(Dependents), median(Dependents, na.rm = TRUE)))
knitr::opts_chunk$set(echo = TRUE)
data <- read.csv("loan.csv")
head(data)
str(data)
print("Dimension: ")
dim(data)
colnames(data)
# These are the columns with chr datatype. To replace them with numeric value, we must find out what each attribute consists of.
# Finding unique values of the first two columns/attributes commented below is meaningless as they are continuous data
#unique(data["Loan_ID"])
#unique(data["Total_Income"])
unique(data["Gender"])
unique(data["Married"])
unique(data["Dependents"])
unique(data["Education"])
unique(data["Self_Employed"])
unique(data["Property_Area"])
unique(data["Loan_Status"])
data[data$Gender=="Male", 'Gender'] <- as.numeric(1)
data[data$Gender=="Female", 'Gender'] <- as.numeric(0)
data[data$Married=="Yes", 'Married'] <- as.numeric(1)
data[data$Married=="No", 'Married'] <- as.numeric(0)
data[data$Dependents=="0", 'Dependents'] <- as.numeric(0)
data[data$Dependents=="1", 'Dependents'] <- as.numeric(1)
data[data$Dependents=="2", 'Dependents'] <- as.numeric(2)
data[data$Dependents=="3+", 'Dependents'] <- as.numeric(3)
data[data$Education=="Graduate", 'Education'] <- as.numeric(1)
data[data$Education=="Not Graduate", 'Education'] <- as.numeric(0)
data[data$Self_Employed=="Yes", 'Self_Employed'] <- as.numeric(1)
data[data$Self_Employed=="No", 'Self_Employed'] <- as.numeric(0)
data[data$Property_Area=="Urban", 'Property_Area'] <- as.numeric(0)
data[data$Property_Area=="Rural", 'Property_Area'] <- as.numeric(1)
data[data$Property_Area=="Semiurban", 'Property_Area'] <- as.numeric(2)
data[data$Loan_Status=="Y", 'Loan_Status'] <- as.numeric(1)
data[data$Loan_Status=="N", 'Loan_Status'] <- as.numeric(0)
data$Gender = as.numeric(as.character(data$Gender))
data$Married = as.numeric(as.character(data$Married))
data$Dependents = as.numeric(as.character(data$Dependents))
data$Education = as.numeric(as.character(data$Education))
data$Self_Employed = as.numeric(as.character(data$Self_Employed))
data$Property_Area = as.numeric(as.character(data$Property_Area))
data$Loan_Status = as.numeric(as.character(data$Loan_Status))
head(data, 7)
str(data)
# Remove the 2 columns:
data <- subset(data, select = -c(ApplicantIncome, CoapplicantIncome))
# We can remove the Loan_ID columns as well:
data <- subset(data, select = -c(Loan_ID))
data$Total_Income = as.numeric(gsub("[\\$,]", "", data$Total_Income))
head(data, 5)
str(data)
library(tidyverse)
print(paste("Number of missing values = ", sum(is.na(data))))
print(paste("Number of duplicate entries = ", sum(duplicated(data))))
sum(is.na(data$Gender))
sum(is.na(data$Married))
sum(is.na(data$Dependents))
sum(is.na(data$Education))
sum(is.na(data$Self_Employed))
sum(is.na(data$LoanAmount))
sum(is.na(data$Loan_Amount_Term))
sum(is.na(data$Credit_History))
sum(is.na(data$Property_Area))
sum(is.na(data$Loan_Status))
sum(is.na(data$Total_Income))
library(tidyverse)
# The median was chosen for these columns because it is the most commonly adopted measure while replacing values that are binary (1,0)
#Gender
data <- data %>%
mutate(Gender = replace(Gender, is.na(Gender), median(Gender, na.rm = TRUE)))
#Married
data <- data %>%
mutate(Married = replace(Married, is.na(Married), median(Married, na.rm = TRUE)))
#Self_Employed
data <- data %>%
mutate(Self_Employed = replace(Self_Employed, is.na(Self_Employed), median(Self_Employed, na.rm = TRUE)))
#Credit_History
data <- data %>%
mutate(Credit_History = replace(Credit_History, is.na(Credit_History), median(Credit_History, na.rm = TRUE)))
#LoanAmount
print(paste("Mean value of the column LoanAmount = ", mean(data$LoanAmount,na.rm = TRUE)))
print(paste("Median value of LoanAmount = ", median(data$LoanAmount,na.rm = TRUE)))
print(paste("Maximum value of LoanAmount = ", max(data$LoanAmount,na.rm = TRUE)))
print(paste("Minimum value of LoanAmount = ", min(data$LoanAmount,na.rm = TRUE)))
#Loan_Amount_Term
print(paste("Mean value of the column Loan_Amount_Term = ", mean(data$Loan_Amount_Term,na.rm = TRUE)))
print(paste("Median value of Loan_Amount_Term = ", median(data$Loan_Amount_Term,na.rm = TRUE)))
print(paste("Maximum value of Loan_Amount_Term = ", max(data$Loan_Amount_Term,na.rm = TRUE)))
print(paste("Minimum value of Loan_Amount_Term = ", min(data$Loan_Amount_Term,na.rm = TRUE)))
#Dependents
print(paste("Mean value of the column Dependents = ", mean(data$Dependents,na.rm = TRUE)))
print(paste("Median value of Dependents = ", median(data$Dependents,na.rm = TRUE)))
print(paste("Maximum value of Dependents = ", max(data$Dependents,na.rm = TRUE)))
print(paste("Minimum value of Dependents = ", min(data$Dependents,na.rm = TRUE)))
# In all the three cases the min and max values differ with a big range. Hence, use median or mean. I have chosen mean and median as shown below
#LoanAmount
data <- data %>%
mutate(LoanAmount = replace(LoanAmount, is.na(LoanAmount), mean(LoanAmount, na.rm = TRUE)))
#Loan_Amount_Term
data <- data %>%
mutate(Loan_Amount_Term = replace(Loan_Amount_Term, is.na(Loan_Amount_Term), mean(Loan_Amount_Term, na.rm = TRUE)))
#Dependents
data <- data %>%
mutate(Dependents = replace(Dependents, is.na(Dependents), median(Dependents, na.rm = TRUE)))
print(paste("Number of missing values = ", sum(is.na(data))))
summary(data)
data%>%
filter(Gender == 0 & Total_Income>0) %>%
summarize(Independent_women = length(Gender))
independent_women = data%>%
filter(Gender == 0 & Total_Income>0) %>%
length(Gender)
independent_women = data%>%
filter(Gender == 0 & Total_Income>0) %>%
independent_women = data%>%
filter(Gender == 0 & Total_Income>0)
independent_women <- data%>%
filter(Gender == 0 & Total_Income>0)
independent_women
independent_women <- data%>%
filter(Gender == 0 & Total_Income>0 & Married == 0)
independent_women
independent_women <- data%>%
filter(Gender == 0 & Total_Income>0 & Married == 0)
independent_women
print(paste("Total: ", length(independent_women)))
independent_women <- data%>%
filter(Gender == 0 & Total_Income>0 & Married == 0)
independent_women
print(paste("Total: ", count(independent_women)))
df <- data%>%
filter(Gender=1 & Loan_Status = 1 & Total_Income>9999 & Dependents >= 3 & Married=1)
df <- data%>%
filter(Gender==1 & Loan_Status == 1 & Total_Income>9999 & Dependents >= 3 & Married==1)
arrange(desc(Total_Income))
df <- data%>%
filter(Gender==1 & Loan_Status == 1 & Total_Income>9999 & Dependents >= 3 & Married==1) %>%
arrange(desc(Total_Income))
df
print(paste("Total: ", count(independent_women)))
df <- data%>%
filter(Gender==1 & Loan_Status == 1 & Total_Income>9999 & Dependents >= 3 & Married==1) %>%
arrange(desc(Total_Income))
df
print(paste("Total: ", count(df)))
men <- data %>%
filter(Gender == 1)
women <- data %>%
filter(Gender == 1)
boxplot(men$LoanAmount, main="gender-wise-boxplot for this dataset", ylab = "Loan amount")
men <- data %>%
filter(Gender == 1)
women <- data %>%
filter(Gender == 1)
men
women
boxplot(men$LoanAmount, main="gender-wise-boxplot for this dataset", ylab = "Loan amount")
men <- data %>%
filter(Gender == 1)
women <- data %>%
filter(Gender == 0)
men
women
boxplot(men$LoanAmount, main="gender-wise-boxplot for this dataset", ylab = "Loan amount")
men <- data %>%
filter(Gender == 1)
women <- data %>%
filter(Gender == 0)
men
women
#boxplot(men$LoanAmount, main="gender-wise-boxplot for this dataset", ylab = "Loan amount")
ggplot(data, aes(x=LoanAmount,y=Gender))+geom_boxplot(fill = "#FF6633")
men <- data %>%
filter(Gender == 1)
women <- data %>%
filter(Gender == 0)
men
women
#boxplot(men$LoanAmount, main="gender-wise-boxplot for this dataset", ylab = "Loan amount")
ggplot(data, aes(x=LoanAmount,y=Gender, group = 1))+geom_boxplot(fill = "#FF6633")
men <- data %>%
filter(Gender == 1)
women <- data %>%
filter(Gender == 0)
boxplot(men$LoanAmount, main="Men-boxplot for this dataset", ylab = "Loan amount")
boxplot(women$LoanAmount, main="Women-boxplot for this dataset", ylab = "Loan amount")
cols = colnames(data)
for (c in cols) {
print(paste("Column", c, ": ", cor(data[[c]],data$LoanAmount)))
}
cols = colnames(data)
for (c in cols) {
print(paste("Column", c, ": ", cov(data[[c]],data$LoanAmount)))
}
mean_charge <- mean(data$LoanAmount)
median_charge <- median(data$LoanAmount)
var_charge <- var(data$LoanAmount)
sd_charge <- sd(data$LoanAmount)
print(paste("mean_LoanAmount = ", mean_charge))
print(paste("median_LoanAmount = ", median_charge))
print(paste("var_LoanAmount = ", var_charge))
print(paste("sd_LoanAmount = ", sd_charge))
ggplot(data, aes(x=Total_Income,y=LoanAmount))+geom_point()
IQR(data$Total_Income)
percentile_i = quantile(data$Total_Income, c(.25,.50,.75))
percentile_i
boxplot(data$Total_Income, main="Total_Income boxplot", ylab = "Total_Income")
hist(data$Dependents, main = "Dependent", xlab = "Dependent", ylab = "frequency")
pairs(data[,c("LoanAmount","Loan_Amount_Term","Education","Dependencies", "Total_Income")])
pairs(data[,c("LoanAmount","Loan_Amount_Term","Education","Dependents", "Total_Income")])
densityplot(Charges)
knitr::opts_chunk$set(echo = TRUE)
data <- read.csv("loan.csv")
head(data)
str(data)
print("Dimension: ")
dim(data)
colnames(data)
# These are the columns with chr datatype. To replace them with numeric value, we must find out what each attribute consists of.
# Finding unique values of the first two columns/attributes commented below is meaningless as they are continuous data
#unique(data["Loan_ID"])
#unique(data["Total_Income"])
unique(data["Gender"])
unique(data["Married"])
unique(data["Dependents"])
unique(data["Education"])
unique(data["Self_Employed"])
unique(data["Property_Area"])
unique(data["Loan_Status"])
data[data$Gender=="Male", 'Gender'] <- as.numeric(1)
data[data$Gender=="Female", 'Gender'] <- as.numeric(0)
data[data$Married=="Yes", 'Married'] <- as.numeric(1)
data[data$Married=="No", 'Married'] <- as.numeric(0)
data[data$Dependents=="0", 'Dependents'] <- as.numeric(0)
data[data$Dependents=="1", 'Dependents'] <- as.numeric(1)
data[data$Dependents=="2", 'Dependents'] <- as.numeric(2)
data[data$Dependents=="3+", 'Dependents'] <- as.numeric(3)
data[data$Education=="Graduate", 'Education'] <- as.numeric(1)
data[data$Education=="Not Graduate", 'Education'] <- as.numeric(0)
data[data$Self_Employed=="Yes", 'Self_Employed'] <- as.numeric(1)
data[data$Self_Employed=="No", 'Self_Employed'] <- as.numeric(0)
data[data$Property_Area=="Urban", 'Property_Area'] <- as.numeric(0)
data[data$Property_Area=="Rural", 'Property_Area'] <- as.numeric(1)
data[data$Property_Area=="Semiurban", 'Property_Area'] <- as.numeric(2)
data[data$Loan_Status=="Y", 'Loan_Status'] <- as.numeric(1)
data[data$Loan_Status=="N", 'Loan_Status'] <- as.numeric(0)
data$Gender = as.numeric(as.character(data$Gender))
data$Married = as.numeric(as.character(data$Married))
data$Dependents = as.numeric(as.character(data$Dependents))
data$Education = as.numeric(as.character(data$Education))
data$Self_Employed = as.numeric(as.character(data$Self_Employed))
data$Property_Area = as.numeric(as.character(data$Property_Area))
data$Loan_Status = as.numeric(as.character(data$Loan_Status))
head(data, 7)
str(data)
# Remove the 2 columns:
data <- subset(data, select = -c(ApplicantIncome, CoapplicantIncome))
# We can remove the Loan_ID columns as well:
data <- subset(data, select = -c(Loan_ID))
data$Total_Income = as.numeric(gsub("[\\$,]", "", data$Total_Income))
head(data, 5)
str(data)
library(tidyverse)
print(paste("Number of missing values = ", sum(is.na(data))))
print(paste("Number of duplicate entries = ", sum(duplicated(data))))
sum(is.na(data$Gender))
sum(is.na(data$Married))
sum(is.na(data$Dependents))
sum(is.na(data$Education))
sum(is.na(data$Self_Employed))
sum(is.na(data$LoanAmount))
sum(is.na(data$Loan_Amount_Term))
sum(is.na(data$Credit_History))
sum(is.na(data$Property_Area))
sum(is.na(data$Loan_Status))
sum(is.na(data$Total_Income))
library(tidyverse)
# The median was chosen for these columns because it is the most commonly adopted measure while replacing values that are binary (1,0)
#Gender
data <- data %>%
mutate(Gender = replace(Gender, is.na(Gender), median(Gender, na.rm = TRUE)))
#Married
data <- data %>%
mutate(Married = replace(Married, is.na(Married), median(Married, na.rm = TRUE)))
#Self_Employed
data <- data %>%
mutate(Self_Employed = replace(Self_Employed, is.na(Self_Employed), median(Self_Employed, na.rm = TRUE)))
#Credit_History
data <- data %>%
mutate(Credit_History = replace(Credit_History, is.na(Credit_History), median(Credit_History, na.rm = TRUE)))
#LoanAmount
print(paste("Mean value of the column LoanAmount = ", mean(data$LoanAmount,na.rm = TRUE)))
print(paste("Median value of LoanAmount = ", median(data$LoanAmount,na.rm = TRUE)))
print(paste("Maximum value of LoanAmount = ", max(data$LoanAmount,na.rm = TRUE)))
print(paste("Minimum value of LoanAmount = ", min(data$LoanAmount,na.rm = TRUE)))
#Loan_Amount_Term
print(paste("Mean value of the column Loan_Amount_Term = ", mean(data$Loan_Amount_Term,na.rm = TRUE)))
print(paste("Median value of Loan_Amount_Term = ", median(data$Loan_Amount_Term,na.rm = TRUE)))
print(paste("Maximum value of Loan_Amount_Term = ", max(data$Loan_Amount_Term,na.rm = TRUE)))
print(paste("Minimum value of Loan_Amount_Term = ", min(data$Loan_Amount_Term,na.rm = TRUE)))
#Dependents
print(paste("Mean value of the column Dependents = ", mean(data$Dependents,na.rm = TRUE)))
print(paste("Median value of Dependents = ", median(data$Dependents,na.rm = TRUE)))
print(paste("Maximum value of Dependents = ", max(data$Dependents,na.rm = TRUE)))
print(paste("Minimum value of Dependents = ", min(data$Dependents,na.rm = TRUE)))
# In all the three cases the min and max values differ with a big range. Hence, use median or mean. I have chosen mean and median as shown below
#LoanAmount
data <- data %>%
mutate(LoanAmount = replace(LoanAmount, is.na(LoanAmount), mean(LoanAmount, na.rm = TRUE)))
#Loan_Amount_Term
data <- data %>%
mutate(Loan_Amount_Term = replace(Loan_Amount_Term, is.na(Loan_Amount_Term), mean(Loan_Amount_Term, na.rm = TRUE)))
#Dependents
data <- data %>%
mutate(Dependents = replace(Dependents, is.na(Dependents), median(Dependents, na.rm = TRUE)))
print(paste("Number of missing values = ", sum(is.na(data))))
summary(data)
library(dplyr)
library(caret)
library(ggplot2)
independent_women <- data%>%
filter(Gender == 0 & Total_Income>0 & Married == 0)
independent_women
print(paste("Total: ", count(independent_women)))
df <- data%>%
filter(Gender==1 & Loan_Status == 1 & Total_Income>9999 & Dependents >= 3 & Married==1) %>%
arrange(desc(Total_Income))
df
print(paste("Total: ", count(df)))
men <- data %>%
filter(Gender == 1)
women <- data %>%
filter(Gender == 0)
boxplot(men$LoanAmount, main="Men-boxplot for this dataset", ylab = "Loan amount")
boxplot(women$LoanAmount, main="Women-boxplot for this dataset", ylab = "Loan amount")
hist(data$Dependents, main = "Dependent", xlab = "Dependent", ylab = "frequency")
boxplot(data$Total_Income, main="Total_Income boxplot", ylab = "Total_Income")
IQR(data$Total_Income)
percentile_i = quantile(data$Total_Income, c(.25,.50,.75))
percentile_i
pairs(data[,c("LoanAmount","Loan_Amount_Term","Education","Dependents", "Total_Income")])
cols = colnames(data)
for (c in cols) {
print(paste("Column", c, ": ", cor(data[[c]],data$LoanAmount)))
}
cols = colnames(data)
for (c in cols) {
print(paste("Column", c, ": ", cov(data[[c]],data$LoanAmount)))
}
mean_charge <- mean(data$LoanAmount)
median_charge <- median(data$LoanAmount)
var_charge <- var(data$LoanAmount)
sd_charge <- sd(data$LoanAmount)
print(paste("mean_LoanAmount = ", mean_charge))
print(paste("median_LoanAmount = ", median_charge))
print(paste("var_LoanAmount = ", var_charge))
print(paste("sd_LoanAmount = ", sd_charge))
ggplot(data, aes(x=Total_Income,y=LoanAmount))+geom_point()
densityplot(Charges)
densityplot(Total_Income)
densityplot(data$Total_Income)
s = skewness(data$Total_Income)
library(lattice)
library(e1071)
library(caret)
s = skewness(data$Total_Income)
k = kurtosis(data$Total_Income)
s
k
library(lattice)
library(e1071)
library(caret)
s = skewness(data$Total_Income)
k = kurtosis(data$Total_Income)
s
k
View(data)
View(data)
ggplot(data,aes(x=Total_Income,y=LoanAmount,color=Loan_Status))+geom_point()+ggtitle("Loan amount vs Income, Color = Loan status")
ggplot(data,aes(x=Total_Income,y=LoanAmount,color=Gender))+geom_point()+ggtitle("Loan amount vs Income, Color = Men or women")
